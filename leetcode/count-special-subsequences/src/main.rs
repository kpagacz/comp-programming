// https://leetcode.com/problems/count-special-subsequences/description/
pub struct Solution;

#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Copy, Hash)]
struct CustomDouble(i32, i32);

impl CustomDouble {
    fn new(a: i32, b: i32) -> Self {
        let gcd = Self::gcd(a, b);
        Self(a / gcd, b / gcd)
    }
    fn gcd(a: i32, b: i32) -> i32 {
        if b == 0 {
            a
        } else {
            CustomDouble::gcd(b, a % b)
        }
    }
}

impl Solution {
    pub fn number_of_subsequences(nums: Vec<i32>) -> i64 {
        // p * r == q * s
        // p / q == s / r
        use std::collections::HashMap;
        let mut products: HashMap<CustomDouble, i64> = HashMap::new();

        let mut answer = 0;
        for q in 2..nums.len() {
            for p in 0..q - 1 {
                let cd = CustomDouble::new(nums[p], nums[q]);
                *products.entry(cd).or_insert(0) += 1;
            }

            let r = q + 2;
            for s in r + 2..nums.len() {
                let ratio = CustomDouble::new(nums[s], nums[r]);
                answer += *products.get(&ratio).unwrap_or(&0);
            }
        }
        answer
    }
}

fn main() {
    let test_cases = [
        vec![3, 4, 3, 4, 3, 4, 3, 4],
        vec![
            986, 707, 497, 549, 748, 700, 509, 812, 532, 844, 598, 528, 353, 41, 394, 236, 417,
            192, 878, 936, 658, 418, 387, 871, 821, 524, 334, 962, 629, 84, 866, 603, 314, 209,
            605, 96, 547, 537, 96, 203, 84, 96, 84, 84, 84, 41, 96, 96, 84, 96, 96, 96, 96, 41, 84,
            84, 990, 96, 84, 84, 84, 96, 84, 466, 96, 84, 360, 84, 84, 264, 84, 11, 41, 84, 96, 11,
            96, 84, 96, 84, 84, 96, 84, 84, 84, 84, 688, 96, 96, 96, 96, 84, 96, 96, 96, 96, 41,
            11, 96, 84, 96, 11, 84, 800, 11, 96, 82, 84, 11, 84, 41, 96, 24, 84, 84, 84, 84, 84,
            84, 84, 41, 96, 96, 96, 84, 50, 96, 96, 96, 84, 96, 84, 323, 84, 41, 41, 84, 11, 48,
            11, 84, 84, 48, 96, 84, 84, 84, 11, 84, 84, 84, 84, 84, 11, 11, 121, 84, 11, 11, 12,
            163, 84, 84, 84, 84, 11, 50, 54, 12, 96, 84, 84, 84, 48, 541, 773, 96, 11, 214, 84, 41,
            96, 41, 24, 84, 6, 96, 12, 96, 84, 11, 96, 21, 11, 84, 22, 96, 84, 48, 84, 84, 84, 84,
            84, 254, 84, 24, 84, 84, 6, 96, 84, 84, 96, 48, 41, 84, 765, 84, 96, 96, 84, 84, 6, 96,
            84, 41, 84, 96, 11, 41, 96, 11, 971, 84, 24, 96, 96, 41, 84, 11, 84, 96, 96, 84, 96,
            84, 11, 84, 22, 84, 84, 96, 96, 41, 82, 11, 22, 96, 317, 22, 48, 95, 84, 96, 48, 84,
            95, 96, 84, 48, 96, 96, 41, 11, 82, 96, 637, 48, 91, 77, 48, 96, 96, 117, 84, 11, 42,
            84, 24, 96, 88, 84, 11, 96, 11, 84, 42, 935, 41, 292, 44, 42, 11, 96, 96, 11, 84, 22,
            96, 41, 84, 82, 316, 96, 77, 11, 12, 24, 96, 48, 96, 782, 41, 24, 942, 227, 84, 96, 82,
            96, 84, 22, 84, 6, 41, 24, 22, 96, 11, 96, 850, 11, 48, 21, 24, 41, 743, 91, 48, 96,
            84, 96, 96, 84, 698, 24, 48, 96, 41, 96, 96, 12, 48, 41, 24, 96, 84, 41, 84, 84, 42,
            82, 82, 11, 84, 909, 22, 12, 96, 96, 96, 91, 91, 42, 96, 91, 84, 41, 96, 11, 12, 77,
            84, 11, 26, 879, 84, 11, 42, 77, 48, 42, 48, 41, 151, 96, 15, 96, 24, 736, 11, 21, 11,
            851, 22, 88, 41, 11, 11, 42, 11, 11, 11, 84, 48, 11, 96, 82, 84, 96, 95, 710, 84, 24,
            702, 41, 84, 95, 44, 922, 91, 730, 21, 11, 41, 84, 41, 41, 96, 84, 41, 96, 48, 21, 91,
            11, 22, 44, 22, 96, 21, 84, 11, 84, 762, 198, 48, 82, 96, 11, 84, 11, 48, 52, 84, 95,
            41, 84, 193, 84, 84, 11, 84, 281, 44, 12, 95, 48, 11, 82, 21, 11, 41, 96, 82, 13, 84,
            48, 84, 22, 96, 969, 59, 24, 44, 11, 84, 96, 77, 82, 48, 48, 11, 11, 729, 96, 48, 96,
            885, 741, 96, 48, 84, 88, 48, 84, 95, 22, 77, 130, 42, 21, 858, 11, 41, 41, 220, 84,
            24, 41, 84, 82, 44, 96, 84, 84, 55, 96, 84, 59, 26, 12, 48, 84, 84, 48, 6, 82, 84, 11,
            82, 84, 11, 544, 13, 2, 96, 84, 11, 96, 84, 84, 42, 48, 11, 11, 822, 48, 82, 12, 96,
            44, 48, 82, 67, 84, 84, 96, 84, 77, 96, 88, 1, 41, 41, 2, 48, 12, 96, 11, 48, 82, 11,
            688, 22, 84, 96, 91, 96, 21, 41, 42, 11, 96, 41, 41, 82, 12, 41, 6, 96, 44, 84, 222,
            41, 22, 96, 12, 12, 96, 24, 82, 41, 88, 96, 11, 91, 48, 823, 48, 96, 22, 92, 21, 159,
            59, 96, 217, 13, 84, 96, 562, 22, 88, 516, 227, 26, 21, 41, 84, 12, 84, 41, 12, 59, 41,
            11, 44, 11, 464, 44, 11, 84, 84, 48, 96, 26, 84, 24, 11, 84, 48, 21, 12, 59, 96, 42,
            22, 26, 41, 91, 21, 77, 82, 754, 12, 12, 46, 6, 127, 48, 22, 84, 96, 84, 132, 44, 91,
            48, 96, 976, 42, 82, 82, 44, 463, 82, 96, 361, 96, 24, 84, 41, 48, 44, 96, 96, 96, 960,
            200, 11, 94, 24, 11, 82, 22, 64, 48, 44, 48, 41, 48, 42, 22, 82, 41, 455, 357, 44, 82,
            48, 866, 48, 96, 24, 91, 42, 801, 91, 48, 386, 466, 22, 24, 24, 96, 48, 21, 11, 11, 91,
            11, 48, 41, 26, 697, 46, 44, 26, 77, 42, 41, 42, 12, 41, 11, 48, 11, 41, 96, 26, 84,
            42, 473, 96, 11, 82, 48, 42, 96, 91, 22, 11, 96, 82, 21, 859, 21, 48, 21, 82, 502, 754,
            52, 21, 957, 21, 91, 24, 21, 12, 22, 42, 82, 88, 96, 33, 67, 11, 30, 42, 84, 84, 87, 3,
            70, 24, 42, 82, 82, 22, 12, 21, 131, 41, 11, 96, 11, 54, 88, 12, 82, 41, 88, 91, 42,
            44, 26, 44, 91, 6, 84, 87, 96, 96, 88, 96, 96, 91, 41, 22, 48, 11, 77, 24, 21, 48, 41,
            96, 96, 91, 82, 96, 88, 64, 48, 96, 22, 12, 84, 41, 88, 42, 84, 84, 44, 48, 44, 11, 96,
            84, 96, 96, 42, 91, 12, 96, 96, 41, 88, 84, 77, 21, 48, 52, 88, 42, 21, 1, 41, 91, 48,
            24, 82, 59, 96, 44, 48, 52, 11, 12, 22, 54, 84, 41, 41, 91, 42, 41, 82, 41, 96, 41, 11,
            96, 88, 82, 91, 77, 42, 46, 96, 6, 84, 42, 88, 96, 66, 84, 42, 41, 44, 12, 88, 24, 82,
            32, 88, 67, 48, 96, 26, 82, 44, 436, 22, 21, 933, 44, 979, 41, 42, 48, 241, 41, 244,
            22, 88, 96, 88, 54, 543, 42, 41, 41, 21, 82, 95, 41,
        ],
    ];

    for nums in test_cases {
        println!("{}", Solution::number_of_subsequences(nums));
    }
}
